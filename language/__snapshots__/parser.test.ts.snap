// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parsing array literals with mixed params: [1, "two"] 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "elements": Array [
          Object {
            "kind": "INTEGER",
            "value": 1,
          },
          Object {
            "kind": "STRING",
            "value": "two",
          },
        ],
        "kind": "ARRAY_LITERAL",
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing array literals with multiple params: [1, 2] 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "elements": Array [
          Object {
            "kind": "INTEGER",
            "value": 1,
          },
          Object {
            "kind": "INTEGER",
            "value": 2,
          },
        ],
        "kind": "ARRAY_LITERAL",
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing array literals with no params: [] 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "elements": Array [],
        "kind": "ARRAY_LITERAL",
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing array literals with one param: [1] 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "elements": Array [
          Object {
            "kind": "INTEGER",
            "value": 1,
          },
        ],
        "kind": "ARRAY_LITERAL",
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing array literals with operators in params: [1, -2, 3 * 3, 1 < 2] 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "elements": Array [
          Object {
            "kind": "INTEGER",
            "value": 1,
          },
          Object {
            "kind": "PREFIX_EXPRESSION",
            "operator": "-",
            "right": Object {
              "kind": "INTEGER",
              "value": 2,
            },
          },
          Object {
            "kind": "INFIX_EXPRESSION",
            "left": Object {
              "kind": "INTEGER",
              "value": 3,
            },
            "operator": "*",
            "right": Object {
              "kind": "INTEGER",
              "value": 3,
            },
          },
          Object {
            "kind": "INFIX_EXPRESSION",
            "left": Object {
              "kind": "INTEGER",
              "value": 1,
            },
            "operator": "<",
            "right": Object {
              "kind": "INTEGER",
              "value": 2,
            },
          },
        ],
        "kind": "ARRAY_LITERAL",
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators adding integers: 5 + 5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "INTEGER",
          "value": 5,
        },
        "operator": "+",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators boolean equal to boolean: false == true 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "BOOL",
          "value": false,
        },
        "operator": "==",
        "right": Object {
          "kind": "BOOL",
          "value": true,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators boolean not equal to boolean: true != false 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "BOOL",
          "value": true,
        },
        "operator": "!=",
        "right": Object {
          "kind": "BOOL",
          "value": false,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators dividing integers: 5 / 5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "INTEGER",
          "value": 5,
        },
        "operator": "/",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators integer equal to integer: 5 == 5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "INTEGER",
          "value": 5,
        },
        "operator": "==",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators integer greater than integer: 5 > 5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "INTEGER",
          "value": 5,
        },
        "operator": ">",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators integer less then integer: 5 < 5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "INTEGER",
          "value": 5,
        },
        "operator": "<",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators integer not equal to integer: 5 != 5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "INTEGER",
          "value": 5,
        },
        "operator": "!=",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators multiplying integers: 5 * 5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "INTEGER",
          "value": 5,
        },
        "operator": "*",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing infix operators subtracting integers: 5 - 5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "INFIX_EXPRESSION",
        "left": Object {
          "kind": "INTEGER",
          "value": 5,
        },
        "operator": "-",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing prefix operators bang false: !false 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "PREFIX_EXPRESSION",
        "operator": "!",
        "right": Object {
          "kind": "BOOL",
          "value": false,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing prefix operators bang integer: !5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "PREFIX_EXPRESSION",
        "operator": "!",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing prefix operators bang true: !true 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "PREFIX_EXPRESSION",
        "operator": "!",
        "right": Object {
          "kind": "BOOL",
          "value": true,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;

exports[`parsing prefix operators negative integer: -5 1`] = `
Object {
  "kind": "PROGRAM",
  "statements": Array [
    Object {
      "expression": Object {
        "kind": "PREFIX_EXPRESSION",
        "operator": "-",
        "right": Object {
          "kind": "INTEGER",
          "value": 5,
        },
      },
      "kind": "EXPRESSION",
    },
  ],
}
`;
